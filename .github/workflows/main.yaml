name: 새로운 블로그 포스트 확인

on:
  schedule:
    - cron: '0 23 * * *'
  workflow_dispatch:

jobs:
  check_blog_post:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: 3.8

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests beautifulsoup4

    - name: Check for new blog posts and update text files
      id: check_new_posts
      run: |
        echo "::set-output name=issue_title::$(python main.py)"

    - name: Commit and push changes if new posts are found
      if: steps.check_new_posts.outputs.issue_title != ''
      run: |
        git config --global user.name 'dgh06175'
        git config --global user.email 'dgh06175@gmail.com'
        git add pastData/*.txt
        git commit -m "새로운 블로그 포스트 기록 텍스트 파일 업데이트"
        git push

    - name: Create GitHub Issue for new posts
      if: steps.check_new_posts.outputs.issue_title != ''
      uses: actions/github-script@v5
      with:
        github-token: ${{ secrets.TECHBLOG_ALARM_ISSUE_ACTION_TOKEN }}
        script: |
          const issueTitle = "${{ steps.check_new_posts.outputs.issue_title }}";
          const currentDate = new Date();
          const formattedDate = `${currentDate.getFullYear()}.${currentDate.getMonth() + 1}.${currentDate.getDate()}`;
          const fullIssueTitle = `${issueTitle} [${formattedDate}]`;
          const issueBody = `## 새로운 블로그 게시글 목록\n\n이번에 업데이트된 블로그는 다음과 같습니다:\n\n${issueTitle}`;
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: fullIssueTitle,
            body: issueBody
          });
